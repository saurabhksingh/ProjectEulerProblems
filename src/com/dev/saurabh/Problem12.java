package com.dev.saurabh;

/**
 * Developer : Saurabh Kumar Singh
 * Date: 19/5/12
 * Time: 2:21 PM
 * Copyright of the code is owned by Saurabh Kr Singh (saurabh.nsit@gmail.com)
 * You are free to use this code either in free/commercial
 * product. However anytime my code is used please mention
 * and give credit to my name and e-mail id.
 */
public class Problem12 {

    /**
     * Problem:
     * The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
     * <p/>
     * 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
     * <p/>
     * Let us list the factors of the first seven triangle numbers:
     * <p/>
     * 1: 1
     * 3: 1,3
     * 6: 1,2,3,6
     * 10: 1,2,5,10
     * 15: 1,3,5,15
     * 21: 1,3,7,21
     * 28: 1,2,4,7,14,28
     * We can see that 28 is the first triangle number to have over five divisors.
     * <p/>
     * What is the value of the first triangle number to have over five hundred divisors?
     */

    public static void main(String[] args) {
        /**
         * solution:
         * Every number can be represented as 3*k or 9*k+1. Even triangle numbers have maximum number of factors
         * compared to its peer number, Ex: 36 has more factors than 45 or 55. So We will be concentrating on
         * even triangle numbers only. Also each even number i of form 9*k+1, where k=0,1,3,6,10,15 (observe that k increases with
         * diff in A.P. I mean diff between different k's are in A.P here. 1-0:1, 3-1:2, 6-3:3, 10-6:4, 15-10:5 etc).
         * So Tn=n*(n-1)/2.
         */

        long currentNumber = 0;
        long currentTriangleNumber = 0;
        long count = 1;
        long startTime = System.currentTimeMillis();
        while (true) {
            currentNumber = currentNumber+count;
            if(currentNumber %2 == 0){
                int numberOfFactors = getNumberOfFactors(currentNumber);
                if (numberOfFactors > 500) {
                    System.out.println(numberOfFactors);
                    break;
                }
            }

            count++;
        }

        System.out.println("Time taken is :"+(System.currentTimeMillis() - startTime)+" ,result is:"+currentNumber);
    }

    private static int getNumberOfFactors(long input) {
        int numberOfFactors = 0;
        int upperLimit = (int)Math.sqrt(input);
        for (int i = 1; i <= upperLimit ; i++)
        {
            if (input % i == 0)
                numberOfFactors += 2;
        }

        return numberOfFactors;
    }
}
